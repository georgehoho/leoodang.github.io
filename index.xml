<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>一个软件从业者的自我精进</title>
    <link>https://leoodang.github.io/index.xml</link>
    <description>Recent content on 一个软件从业者的自我精进</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Oct 2016 15:50:15 +0800</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>objective-C 内存管理 II</title>
      <link>https://leoodang.github.io/post/2016/10/memory-management-of-objective-c-objects-II/</link>
      <pubDate>Wed, 19 Oct 2016 15:50:15 +0800</pubDate>
      
      <guid>https://leoodang.github.io/post/2016/10/memory-management-of-objective-c-objects-II/</guid>
      <description>ARC规则 引用计数机制的内存管理模型总结起来就是如下几条原则：
 自己生成的对象，自己持有（使用alloc、new、copy开头的方法生成） 非自己生成的对象，自己也能持有（使用retain） 自己持有的对象，在不需要的时候需要释放（release） 非自己持有的对象，无权释放  所有权修饰符 在ARC环境下，Objecti-C 追加了所有权修饰符：
 __strong修饰符 __weak修饰符 __unsafe_unretained修饰符 __autoreleasing修饰符  __strong修饰符 id类型和对象类型默认的所有权修饰符为__strong修饰符。
id object = [[NSObject alloc] init];  id __strong object = [[NSObject alloc] init];  以上两段代码在ARC环境下是等同的。那么MRC环境下，以上代码又等同于什么呢？
//MRC id object = [[NSObject alloc] init]; [object release];  如代码所示，__strong 修饰的object对象在超出其作用域时释放。
__weak修饰符 仅仅通过__strong修饰符无法解决一些重大问题，其中最严重的就是循环引用的问题。 如果两个对象互相持有，导致彼此不能释放，进而引发内存泄露。所谓内存泄露就是指对象在超出其生命周期后没有正确的释放，继续存在在内存中。 weak与strong相反，提供弱引用，不持有对象,并在对象释放后自动置为nil。参看一下代码：
id __weak obj = [[NSObject alloc] init]; NSLog(@&amp;quot;%@&amp;quot;,obj);  试想这段代码的输出是什么？我们会得到一个编译警告：Assigning retained object to weak variable; object will be released after assignment。因为对象生成后引用计数为0，随即被释放掉，我们打印出来的是null。 像下面的代码段就没有问题了:</description>
    </item>
    
    <item>
      <title>objective-C 内存管理 I</title>
      <link>https://leoodang.github.io/post/2016/10/memory-management-of-objective-c-objects/</link>
      <pubDate>Tue, 18 Oct 2016 17:23:48 +0800</pubDate>
      
      <guid>https://leoodang.github.io/post/2016/10/memory-management-of-objective-c-objects/</guid>
      <description>内存管理 内存管理是指管理对象的生命周期，并在不需要对象的时候释放它们。管理对象内存是一件和软件性能戚戚相关的事情：如果应用不释放那些无用的对象，就会导致占用的内存不断增加进而影响到性能，甚至崩溃。Apple 公司的Cocoa框架并没有采用垃圾回收机制，而是使用了自动引用计数模型。当你创建或者复制了一个对象，该对象的引用计数加1。如果其他对象持有该对象，引用计数增加（+1）。如果持有者放弃该对象的所有权，该对象的引用计数减少（-1）。当一个对象的引用计数减为零时，该对象被销毁，相应的内存被释放出来。
为了帮助我们使用内存管理，Objective-C 提供了一系列我们需要遵守的方法和机制。
内存管理规则 内存管理规则，有时也称为所有权原则，帮助你在Objective-C 代码中正确地管理内存。
 你持有使用 allocating 方法 或者copying 创建的对象 相关方法有：alloc，allocWithZone：，copy，copyWithZone：，mutableCopy，mutabCopyWithZone：，new
 id object = [[NSObject alloc] init];//自己生成且持有  对于那些不是自己创建的对象，如果需要保留在内存中供你使用，也可以通过表示所有权来持有 相关方法有：retain
id object = [NSArray array];//自己生成但不持有 [object retain];//通过retain持有对象  对于那些你持有的对象，你需要在不需要它们的时候释放。 相关方法有：release, autorelease
id object = [[NSObject alloc] init];//自己生成且持有 [object release];//释放  id object = [NSArray array];//自己生成但不持有 [object retain];//通过retain持有对象 [object release];//释放  对于非自己持有的对象，则不能进行释放操作。
 id object = [NSArray array];//自己生成但不持有 [object release]; //Error   如果在程序的其他地方捕获到一个对象，通常该对象的有效作用域就是捕获对象的方法或者函数中。如果在超出对象作用域还想继续持有该对象，我们应当使用 copy 或者 retain 方法来持有它。如果你尝试对一个已经释放的对象进行 release 操作，你的程序将会崩溃。</description>
    </item>
    
  </channel>
</rss>
